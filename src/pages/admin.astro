---
import Layout from "../layouts/Layout.astro";
import AdminLogin from "../components/AdminLogin.astro";
import { config } from "../config/config";
import brandData from "../data/brand.json";

// Mark this page for server-side rendering
export const prerender = true;

// Simple authentication for personal use
// In a real app, you would use a more secure approach

// Check if the user is authenticated
let isAuthenticated = false;
let showError = false;

// Always allow access with the direct URL parameter (for development/personal use)
const url = new URL(Astro.request.url);
if (url.searchParams.get("auth") === "bypass123") {
  isAuthenticated = true;
}

// Check for cookie-based authentication
const cookies = Astro.request.headers.get("cookie");
if (cookies && cookies.includes("admin_authenticated=true")) {
  isAuthenticated = true;
}

// Handle form submission
if (Astro.request.method === "POST") {
  try {
    const formData = await Astro.request.formData();
    const password = formData.get("password");

    // Accept either the config password or the hardcoded one for simplicity
    const validPasswords = ["admin", "brandguide123"];

    if (validPasswords.includes(password?.toString() || "")) {
      isAuthenticated = true;
      // Set a cookie to maintain authentication
      Astro.response.headers.set(
        "Set-Cookie",
        "admin_authenticated=true; Path=/; HttpOnly; SameSite=Strict; Max-Age=3600",
      );
    } else {
      showError = true;
    }
  } catch (error) {
    console.error("Error processing form:", error);
  }
}
---

<Layout title="Admin Panel" showNav={false}>
  {
    !isAuthenticated ? (
      <AdminLogin error={showError} />
    ) : (
      <div class="admin-container">
        <header class="admin-header">
          <div class="admin-header-content">
            <div>
              <h1>Brand Guide Admin</h1>
              <p>Use this page to manage your brand guide configuration</p>
            </div>
            <a href="/" class="btn-secondary">
              Back to Brand Guide
            </a>
          </div>
        </header>

        <div class="admin-content">
          <section class="admin-section">
            <h2>Brand Information</h2>
            <div class="form-group">
              <label for="companyName">Company Name</label>
              <input
                type="text"
                id="companyName"
                value={brandData.companyName}
              />
            </div>
            <div class="form-group">
              <label for="tagline">Tagline</label>
              <input type="text" id="tagline" value={brandData.tagline} />
            </div>
          </section>

          <section class="admin-section">
            <h2>Color Management</h2>
            <div class="color-categories">
              <div class="color-category">
                <h3>Primary Colors</h3>
                <div class="color-list" id="primary-colors">
                  {brandData.colors.primary.map((color, index) => (
                    <div
                      class="color-item"
                      data-category="primary"
                      data-index={index}
                    >
                      <div
                        class="color-preview"
                        style={`background-color: ${color.hex}`}
                      />
                      <div class="color-details">
                        <input
                          type="text"
                          class="color-name"
                          value={color.name}
                        />
                        <div class="color-values">
                          <div class="color-value">
                            <label>HEX</label>
                            <input
                              type="text"
                              class="color-hex"
                              value={color.hex}
                            />
                          </div>
                          <div class="color-value">
                            <label>CMYK</label>
                            <input
                              type="text"
                              class="color-cmyk"
                              value={color.cmyk}
                            />
                          </div>
                        </div>
                        <textarea
                          class="color-description"
                          placeholder="Color description"
                        >
                          {color.description}
                        </textarea>
                      </div>
                    </div>
                  ))}
                  <button class="add-color-btn" data-category="primary">
                    + Add Primary Color
                  </button>
                </div>
              </div>

              <div class="color-category">
                <h3>Accent Colors</h3>
                <div class="color-list" id="accent-colors">
                  {brandData.colors.accent.map((color, index) => (
                    <div
                      class="color-item"
                      data-category="accent"
                      data-index={index}
                    >
                      <div
                        class="color-preview"
                        style={`background-color: ${color.hex}`}
                      />
                      <div class="color-details">
                        <input
                          type="text"
                          class="color-name"
                          value={color.name}
                        />
                        <div class="color-values">
                          <div class="color-value">
                            <label>HEX</label>
                            <input
                              type="text"
                              class="color-hex"
                              value={color.hex}
                            />
                          </div>
                          <div class="color-value">
                            <label>CMYK</label>
                            <input
                              type="text"
                              class="color-cmyk"
                              value={color.cmyk}
                            />
                          </div>
                        </div>
                        <textarea
                          class="color-description"
                          placeholder="Color description"
                        >
                          {color.description}
                        </textarea>
                      </div>
                    </div>
                  ))}
                  <button class="add-color-btn" data-category="accent">
                    + Add Accent Color
                  </button>
                </div>
              </div>
            </div>
          </section>

          <section class="admin-section">
            <h2>Typography</h2>
            <div class="form-group">
              <label for="font-family">Primary Font</label>
              <input
                type="text"
                id="font-family"
                value={brandData.typography.font}
              />
            </div>
            <div class="form-group">
              <label for="typography-intro">Typography Introduction</label>
              <textarea id="typography-intro" rows="3">
                {brandData.typography.intro}
              </textarea>
            </div>
          </section>

          <section class="admin-section">
            <h2>Template Configuration</h2>
            <div class="form-group">
              <label for="site-title">Site Title</label>
              <input type="text" id="site-title" value={config.site.title} />
            </div>
            <div class="form-group">
              <label for="site-description">Site Description</label>
              <input
                type="text"
                id="site-description"
                value={config.site.description}
              />
            </div>
            <div class="form-group checkbox-group">
              <label>
                <input
                  type="checkbox"
                  id="show-cmyk"
                  checked={config.features.showCMYK}
                />
                Show CMYK Values
              </label>
            </div>
            <div class="form-group checkbox-group">
              <label>
                <input
                  type="checkbox"
                  id="enable-downloads"
                  checked={config.features.enableDownloads}
                />
                Enable Downloads
              </label>
            </div>
          </section>

          <div class="admin-actions">
            <button id="save-config" class="btn-primary save-btn">
              <svg
                xmlns="http://www.w3.org/2000/svg"
                width="16"
                height="16"
                viewBox="0 0 24 24"
                fill="none"
                stroke="currentColor"
                stroke-width="2"
                stroke-linecap="round"
                stroke-linejoin="round"
              >
                <>
                  <path d="M19 21H5a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h11l5 5v11a2 2 0 0 1-2 2z" />
                  <polyline points="17 21 17 13 7 13 7 21" />
                  <polyline points="7 3 7 8 15 8" />
                </>
              </svg>
              Save Configuration
            </button>
            <p class="vercel-note">
              Note: This is a static demo version. Changes are not permanently
              saved. In a real implementation, this would save to a database or
              API.
            </p>
          </div>
        </div>
      </div>
    )
  }
</Layout>

<style>
  .admin-container {
    max-width: 1200px;
    margin: 0 auto;
    padding: 2rem;
  }

  .admin-header {
    margin-bottom: 2rem;
    padding-bottom: 1rem;
    border-bottom: 1px solid var(--border);
  }

  .admin-header-content {
    display: flex;
    justify-content: space-between;
    align-items: center;
  }

  .admin-header h1 {
    font-size: 2rem;
    margin-bottom: 0.5rem;
  }

  .admin-section {
    margin-bottom: 3rem;
    padding: 1.5rem;
    background-color: white;
    border-radius: var(--radius);
    box-shadow: var(--shadow);
  }

  .admin-section h2 {
    margin-top: 0;
    margin-bottom: 1.5rem;
    font-size: 1.5rem;
  }

  .form-group {
    margin-bottom: 1.5rem;
  }

  .form-group label {
    display: block;
    margin-bottom: 0.5rem;
    font-weight: 500;
  }

  input[type="text"],
  textarea {
    width: 100%;
    max-width: 100%;
    padding: 0.75rem;
    border: 1px solid var(--border);
    border-radius: var(--radius-sm);
    font-family: inherit;
    font-size: 1rem;
    transition: border-color 0.2s ease;
  }

  input[type="text"]:focus,
  textarea:focus {
    outline: none;
    border-color: var(--primary);
    box-shadow: 0 0 0 2px rgba(37, 99, 235, 0.1);
  }

  .checkbox-group {
    display: flex;
    align-items: center;
  }

  .checkbox-group input {
    margin-right: 0.5rem;
  }

  .color-categories {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(400px, 1fr));
    gap: 2rem;
  }

  .color-category h3 {
    margin-top: 0;
    margin-bottom: 1rem;
  }

  .color-list {
    display: flex;
    flex-direction: column;
    gap: 1rem;
  }

  .color-item {
    display: flex;
    border: 1px solid var(--border);
    border-radius: var(--radius);
    overflow: hidden;
    box-shadow: 0 1px 3px rgba(0, 0, 0, 0.05);
    transition:
      box-shadow 0.2s ease,
      transform 0.2s ease;
  }

  .color-item:hover {
    box-shadow: 0 3px 6px rgba(0, 0, 0, 0.08);
    transform: translateY(-2px);
  }

  .color-preview {
    width: 80px;
    min-height: 100%;
  }

  .color-details {
    flex: 1;
    padding: 1rem;
  }

  .color-name {
    margin-bottom: 0.75rem;
    font-weight: 500;
  }

  .color-values {
    display: grid;
    grid-template-columns: 1fr 1fr;
    gap: 0.75rem;
    margin-bottom: 0.75rem;
  }

  .color-value input {
    width: 100%;
    padding: 0.5rem;
    border: 1px solid var(--border);
    border-radius: var(--radius-sm);
    font-family: inherit;
    font-size: 0.9rem;
    transition: border-color 0.2s ease;
  }

  .color-value input:focus {
    outline: none;
    border-color: var(--primary);
    box-shadow: 0 0 0 2px rgba(37, 99, 235, 0.1);
  }

  .color-value label {
    display: block;
    font-size: 0.75rem;
    margin-bottom: 0.25rem;
    color: var(--text-light);
  }

  .color-description {
    height: 60px;
    font-size: 0.875rem;
  }

  .add-color-btn {
    padding: 0.75rem;
    background-color: var(--secondary-bg);
    border: 1px dashed var(--border);
    border-radius: var(--radius);
    color: var(--text-light);
    font-weight: 500;
    cursor: pointer;
    transition: all 0.2s ease;
  }

  .add-color-btn:hover {
    background-color: var(--primary-light);
    color: white;
    border-color: var(--primary-light);
  }

  .admin-actions {
    display: flex;
    justify-content: flex-end;
    margin-top: 2rem;
  }

  .save-btn {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    padding: 0.75rem 1.5rem;
    font-weight: 500;
    transition: all 0.2s ease;
  }

  .save-btn:hover {
    transform: translateY(-2px);
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
  }

  .loading-icon {
    animation: spin 1.5s linear infinite;
  }

  @keyframes spin {
    0% {
      transform: rotate(0deg);
    }
    100% {
      transform: rotate(360deg);
    }
  }

  .vercel-note {
    margin-top: 1rem;
    font-size: 0.85rem;
    color: #666;
    font-style: italic;
    max-width: 300px;
    line-height: 1.4;
  }

  /* Admin actions styling already defined above */

  .btn-primary,
  .btn-secondary {
    padding: 0.75rem 1.5rem;
    border-radius: var(--radius);
    font-weight: 500;
    cursor: pointer;
    text-decoration: none;
    display: inline-flex;
    align-items: center;
    justify-content: center;
  }

  .btn-primary {
    background-color: var(--primary);
    color: white;
    border: none;
  }

  .btn-secondary {
    background-color: var(--secondary-bg);
    color: var(--text);
    border: 1px solid var(--border);
  }

  .btn-primary:hover {
    background-color: var(--primary-dark);
  }

  .btn-secondary:hover {
    background-color: var(--border);
  }

  @media (max-width: 768px) {
    .color-categories {
      grid-template-columns: 1fr;
    }
  }
</style>

<script>
  // This is a simplified admin interface
  // In a real implementation, you would need to add server-side functionality
  // to save the configuration to the file system

  document.addEventListener("DOMContentLoaded", () => {
    // Initialize color pickers
    document.querySelectorAll(".color-hex").forEach((input) => {
      input.addEventListener("change", (e) => {
        const colorItem = e.target.closest(".color-item");
        const preview = colorItem.querySelector(".color-preview");
        preview.style.backgroundColor = e.target.value;
      });
    });

    // Add color buttons
    document.querySelectorAll(".add-color-btn").forEach((button) => {
      button.addEventListener("click", (e) => {
        const category = e.target.dataset.category;
        const colorList = document.getElementById(`${category}-colors`);

        // Create a new color item
        const newColorItem = document.createElement("div");
        newColorItem.className = "color-item";
        newColorItem.dataset.category = category;
        newColorItem.dataset.index =
          colorList.querySelectorAll(".color-item").length;

        newColorItem.innerHTML = `
          <div class="color-preview" style="background-color: #cccccc"></div>
          <div class="color-details">
            <input type="text" class="color-name" value="New Color" />
            <div class="color-values">
              <div class="color-value">
                <label>HEX</label>
                <input type="text" class="color-hex" value="#cccccc" />
              </div>
              <div class="color-value">
                <label>CMYK</label>
                <input type="text" class="color-cmyk" value="0, 0, 0, 20" />
              </div>
            </div>
            <textarea class="color-description" placeholder="Color description"></textarea>
          </div>
        `;

        // Add event listener to the new color hex input
        const hexInput = newColorItem.querySelector(".color-hex");
        hexInput.addEventListener("change", (e) => {
          const preview = newColorItem.querySelector(".color-preview");
          preview.style.backgroundColor = e.target.value;
        });

        // Insert before the add button
        colorList.insertBefore(newColorItem, e.target);
      });
    });

    // Save button implementation
    document
      .getElementById("save-config")
      .addEventListener("click", async () => {
        // Show loading state
        const saveBtn = document.getElementById("save-config");
        const originalText = saveBtn.innerHTML;
        saveBtn.innerHTML = `<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="loading-icon"><circle cx="12" cy="12" r="10"></circle><path d="M12 6v6l4 2"></path></svg> Saving...`;
        saveBtn.disabled = true;

        try {
          // Collect brand data
          const brandData = JSON.parse(
            document.getElementById("brand-data").textContent,
          );

          // Update company info
          brandData.companyName = document.getElementById("companyName").value;
          brandData.tagline = document.getElementById("tagline").value;

          // Update colors
          // Primary colors
          document
            .querySelectorAll("#primary-colors .color-item")
            .forEach((item, index) => {
              if (index < brandData.colors.primary.length) {
                brandData.colors.primary[index].name =
                  item.querySelector(".color-name").value;
                brandData.colors.primary[index].hex =
                  item.querySelector(".color-hex").value;
                brandData.colors.primary[index].cmyk =
                  item.querySelector(".color-cmyk").value;
                brandData.colors.primary[index].description =
                  item.querySelector(".color-description").value;
              }
            });

          // Accent colors
          document
            .querySelectorAll("#accent-colors .color-item")
            .forEach((item, index) => {
              if (index < brandData.colors.accent.length) {
                brandData.colors.accent[index].name =
                  item.querySelector(".color-name").value;
                brandData.colors.accent[index].hex =
                  item.querySelector(".color-hex").value;
                brandData.colors.accent[index].cmyk =
                  item.querySelector(".color-cmyk").value;
                brandData.colors.accent[index].description =
                  item.querySelector(".color-description").value;
              }
            });

          // Neutral colors
          document
            .querySelectorAll("#neutral-colors .color-item")
            .forEach((item, index) => {
              if (index < brandData.colors.neutral.length) {
                brandData.colors.neutral[index].name =
                  item.querySelector(".color-name").value;
                brandData.colors.neutral[index].hex =
                  item.querySelector(".color-hex").value;
                brandData.colors.neutral[index].cmyk =
                  item.querySelector(".color-cmyk").value;
                brandData.colors.neutral[index].description =
                  item.querySelector(".color-description").value;
              }
            });

          // Update typography
          brandData.typography.font =
            document.getElementById("font-family").value;
          brandData.typography.intro =
            document.getElementById("typography-intro").value;

          // Collect config data
          const configData = {
            site: {
              title: document.getElementById("site-title").value,
              description: document.getElementById("site-description").value,
            },
            features: {
              showCMYK: document.getElementById("show-cmyk").checked,
              enableDownloads:
                document.getElementById("enable-downloads").checked,
            },
          };

          // In static mode, we'll simulate a successful API response
          // In a real implementation, this would send data to a database or API
          console.log("Brand data:", brandData);
          console.log("Config data:", configData);

          // Simulate API delay
          await new Promise((resolve) => setTimeout(resolve, 1000));

          // Simulate API response
          const result = {
            success: true,
            message:
              "This is a static demo version. In a production environment, this would save to a database.",
          };

          if (result.success) {
            // Show success message
            saveBtn.innerHTML = `<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><polyline points="20 6 9 17 4 12"></polyline></svg> Saved!`;

            // Reset button after 2 seconds
            setTimeout(() => {
              saveBtn.innerHTML = originalText;
              saveBtn.disabled = false;
            }, 2000);
          } else {
            throw new Error(result.message || "Failed to save configuration");
          }
        } catch (error) {
          console.error("Error saving configuration:", error);

          // Show error message
          saveBtn.innerHTML = `<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><circle cx="12" cy="12" r="10"></circle><line x1="12" y1="8" x2="12" y2="12"></line><line x1="12" y1="16" x2="12.01" y2="16"></line></svg> Error!`;

          // Show alert with error message
          alert(`Error saving configuration: ${error.message}`);

          // Reset button after 2 seconds
          setTimeout(() => {
            saveBtn.innerHTML = originalText;
            saveBtn.disabled = false;
          }, 2000);
        }
      });
  });
</script>
