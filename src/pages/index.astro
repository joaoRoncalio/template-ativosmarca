---
import Layout from "../layouts/Layout.astro";
import ColorGrid from "../components/ColorGrid.astro";
import LogoGrid from "../components/LogoGrid.astro";
import DownloadButton from "../components/DownloadButton.astro";
// @ts-ignore - JSON import
import brandData from "../data/brand.json";
---

<Layout
  title={brandData.ui.meta.title}
  description={`${brandData.ui.meta.description} ${brandData.companyName}`}
>
  <!-- Hidden element to store brand data for JavaScript access -->
  <script
    id="brand-data"
    type="application/json"
    is:inline
    set:html={JSON.stringify(brandData)}
  />
  <div class="container">
    <section class="hero">
      <div class="hero-content">
        <h1>{brandData.companyName} <span>{brandData.ui.meta.title}</span></h1>
        <p>{brandData.tagline}</p>
        <div class="hero-cta">
          <a href="#logos" class="btn btn-primary"
            >{brandData.ui.buttons.exploreGuidelines}</a
          >
          <a href="#colors" class="btn btn-secondary"
            >{brandData.ui.buttons.viewColorPalette}</a
          >
        </div>
      </div>
      <!--  <div class="hero-image">
        <img
          src={brandData.logos.primary.svg}
          alt="Logotipo {brandData.companyName}"
          width="300"
          height="90"
        />
      </div> -->
    </section>

    <section id="logos" class="section">
      <h2>{brandData.ui.sections.logos}</h2>
      <div class="content">
        <LogoGrid
          logos={brandData.logos}
          title={brandData.ui.sections.logoVariations}
        />

        <!-- Guidelines section remains unchanged -->
        <h3>{brandData.ui.sections.usageGuidelines}</h3>
        <ul class="guidelines-list">
          {
            brandData.logos.guidelines.map((guideline) => (
              <li>
                <svg
                  xmlns="http://www.w3.org/2000/svg"
                  width="16"
                  height="16"
                  viewBox="0 0 24 24"
                  fill="none"
                  stroke="currentColor"
                  stroke-width="2"
                  stroke-linecap="round"
                  stroke-linejoin="round"
                >
                  <polyline points="20 6 9 17 4 12" />
                </svg>
                {guideline}
              </li>
            ))
          }
        </ul>
      </div>
    </section>

    <section id="colors" class="section">
      <h2>{brandData.ui.sections.colors}</h2>
      <div class="content">
        <div class="color-intro">
          <p>{brandData.colors.intro}</p>
        </div>

        {/* Dynamic color grids that adjust based on the number of colors */}
        <ColorGrid
          colors={brandData.colors.primary}
          category="primary"
          title={brandData.ui.sections.primaryColors}
        />

        <ColorGrid
          colors={brandData.colors.accent}
          category="accent"
          title={brandData.ui.sections.accentColors}
        />

        <ColorGrid
          colors={brandData.colors.neutral}
          category="neutral"
          title={brandData.ui.sections.neutralColors}
        />
      </div>
    </section>

    <section id="typography" class="section">
      <h2>{brandData.ui.sections.typography}</h2>
      <div class="content">
        <p class="section-intro">{brandData.typography.intro}</p>

        <!-- Font Families -->
        <h3>{brandData.ui.sections.fontFamilies}</h3>
        <div class="font-families-grid">
          {
            Object.entries(brandData.typography.families).map(([key, font]) => (
              <div class="type-card">
                <div class="type-preview">
                  <p class="type-sample" style={`font-family: ${font.name};`}>
                    {font.sample}
                  </p>
                </div>
                <div class="type-info">
                  <h4>{font.title}</h4>
                  <p>{font.description}</p>
                  <ul class="type-specs">
                    <li>
                      <strong>Weights:</strong> {font.weights.join(", ")}
                    </li>
                  </ul>
                  <div class="download-links">
                    {font.web && (
                      <a href={font.web} download class="download-link">
                        <svg
                          xmlns="http://www.w3.org/2000/svg"
                          width="16"
                          height="16"
                          viewBox="0 0 24 24"
                          fill="none"
                          stroke="currentColor"
                          stroke-width="2"
                          stroke-linecap="round"
                          stroke-linejoin="round"
                        >
                          <path d="M21 15v4a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2v-4" />
                          <polyline points="7 10 12 15 17 10" />
                          <line x1="12" y1="15" x2="12" y2="3" />
                        </svg>
                        {brandData.ui.buttons.downloadWebFonts}
                      </a>
                    )}
                    {font.googleFonts && (
                      <a
                        href={font.googleFonts}
                        target="_blank"
                        rel="noopener noreferrer"
                        class="download-link"
                      >
                        <svg
                          xmlns="http://www.w3.org/2000/svg"
                          width="16"
                          height="16"
                          viewBox="0 0 24 24"
                          fill="none"
                          stroke="currentColor"
                          stroke-width="2"
                          stroke-linecap="round"
                          stroke-linejoin="round"
                        >
                          <circle cx="12" cy="12" r="10" />
                          <line x1="2" y1="12" x2="22" y2="12" />
                          <path d="M12 2a15.3 15.3 0 0 1 4 10 15.3 15.3 0 0 1-4 10 15.3 15.3 0 0 1-4-10 15.3 15.3 0 0 1 4-10z" />
                        </svg>
                        {brandData.ui.buttons.viewGoogleFonts}
                      </a>
                    )}
                  </div>
                </div>
              </div>
            ))
          }
        </div>

        <!-- Typography Guidelines -->
        <h3>{brandData.ui.sections.typographyGuidelines}</h3>
        <ul class="guidelines-list">
          {
            brandData.typography.guidelines.map((guideline) => (
              <li>
                <svg
                  xmlns="http://www.w3.org/2000/svg"
                  width="16"
                  height="16"
                  viewBox="0 0 24 24"
                  fill="none"
                  stroke="currentColor"
                  stroke-width="2"
                  stroke-linecap="round"
                  stroke-linejoin="round"
                >
                  <polyline points="20 6 9 17 4 12" />
                </svg>
                {guideline}
              </li>
            ))
          }
        </ul>
      </div>
    </section>
  </div>
</Layout>

<!-- Styles moved to global.css -->

<script src="/js/colorManager.js" type="module" is:inline></script>

<script is:inline>
  // Add client-side JavaScript for copy to clipboard functionality
  document.addEventListener("DOMContentLoaded", () => {
    // Handle copy to clipboard
    const copyButtons = document.querySelectorAll(".copy-btn");
    copyButtons.forEach((button) => {
      button.addEventListener("click", () => {
        const colorValueElement = button.closest(".color-value");
        if (!colorValueElement) return;

        const colorValue = colorValueElement.getAttribute("data-clipboard");
        if (!colorValue) return;

        navigator.clipboard
          .writeText(colorValue)
          .then(() => {
            // Show success feedback
            const originalHTML = button.innerHTML;
            button.innerHTML =
              '<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="#10b981" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><polyline points="20 6 9 17 4 12"></polyline></svg>';

            // Use setAttribute for TypeScript compatibility
            button.setAttribute("style", "color: #10b981 !important"); // Green color

            setTimeout(() => {
              button.innerHTML = originalHTML;
              button.setAttribute("style", ""); // Reset style
            }, 2000);
          })
          .catch((err) => {
            console.error("Failed to copy: ", err);
            // Provide visual feedback even if clipboard fails
            alert("Valor da cor: " + colorValue);
          });
      });
    });

    // Smooth scrolling for anchor links
    const anchorLinks = document.querySelectorAll('a[href^="#"]');
    anchorLinks.forEach((link) => {
      link.addEventListener("click", function (e) {
        e.preventDefault();
        const targetId = this.getAttribute("href");
        if (!targetId) return;

        const targetElement = document.querySelector(targetId);
        if (targetElement) {
          const offsetTop =
            targetElement.getBoundingClientRect().top + window.pageYOffset;
          window.scrollTo({
            top: offsetTop - 80, // Adjust for fixed header
            behavior: "smooth",
          });
        }
      });
    });

    // Add touch feedback for mobile devices
    const allButtons = document.querySelectorAll(
      ".btn, .download-link, .copy-btn",
    );
    allButtons.forEach((button) => {
      button.addEventListener("touchstart", () => {
        button.classList.add("touch-active");
      });

      button.addEventListener("touchend", () => {
        button.classList.remove("touch-active");
      });
    });
  });
</script>

<script>
  // Add event listener for theme changes to update colors
  document.addEventListener("DOMContentLoaded", () => {
    // Initial update
    updateThemeSpecificElements();

    // Listen for theme toggle clicks
    const themeToggle = document.getElementById("theme-toggle");
    if (themeToggle) {
      themeToggle.addEventListener("click", () => {
        // Allow a small delay for the class to be applied
        setTimeout(updateThemeSpecificElements, 50);
      });
    }

    function updateThemeSpecificElements() {
      // Update any theme-specific elements that might need JavaScript
      const isDarkMode =
        document.documentElement.classList.contains("dark-mode");

      // Example: Update card backgrounds if needed
      document.querySelectorAll(".usage-card").forEach((card) => {
        (card as HTMLElement).style.backgroundColor = isDarkMode
          ? "var(--secondary-bg)"
          : "var(--background)";
      });
    }
  });
</script>

<script src="/js/themeManager.js" is:inline></script>
