---
import Layout from "../layouts/Layout.astro";
import ColorGrid from "../components/ColorGrid.astro";
import LogoGrid from "../components/LogoGrid.astro";
// @ts-ignore - JSON import
import brandData from "../data/brand.json";

// Get all mockup images from the public assets folder
// @ts-ignore - Mockup images
import.meta.glob("/public/assets/mockups/*.{jpg,jpeg,png,webp}", {
  eager: true,
});

// Just list the files directly
const mockupPaths: string[] = [];
try {
  // This is a simple way to get files from a directory at build time
  const files = import.meta.glob(
    "/public/assets/mockups/*.{jpg,jpeg,png,webp}",
    { eager: true },
  );

  if (files && Object.keys(files).length > 0) {
    Object.values(files).forEach((file) => {
      if ((file as any).default) {
        mockupPaths.push((file as any).default.src || (file as any).default);
      }
    });
  }
} catch (error) {
  console.error("Error loading mockup images:", error);
}

// If no files were found, add some fallback paths for testing
if (mockupPaths.length === 0) {
  for (let i = 1; i <= 3; i++) {
    mockupPaths.push(`/assets/mockups/mockup-${i}.jpg`);
  }
}
---

<Layout
  title={brandData.ui.meta.title}
  description={brandData.ui.meta.description}
>
  <!-- Hidden element to store brand data for JavaScript access -->
  <script
    id="brand-data"
    type="application/json"
    is:inline
    set:html={JSON.stringify(brandData)}
  />
  <div class="container">
    <section class="hero">
      <div class="hero-content">
        <h1>{brandData.companyName} <span>{brandData.heroSubtitle}</span></h1>
        <p>{brandData.tagline}</p>
        <div class="hero-cta">
          <a href="#logos" class="btn btn-primary"
            >{brandData.ui.buttons.exploreGuidelines}</a
          >
          <a href="#colors" class="btn btn-secondary"
            >{brandData.ui.buttons.viewColorPalette}</a
          >
        </div>
      </div>
      <!--  <div class="hero-image">
        <img
          src={brandData.logos.primary.svg}
          alt="Logotipo {brandData.companyName}"
          width="300"
          height="90"
        />
      </div> -->
    </section>

    <section id="logos" class="section">
      <h2>{brandData.ui.sections.logos}</h2>
      <div class="content">
        <LogoGrid
          logos={brandData.logos}
          title={brandData.ui.sections.logoVariations}
        />

        <!-- Guidelines section remains unchanged -->
        <h3>{brandData.ui.sections.usageGuidelines}</h3>
        <ul class="guidelines-list">
          {
            brandData.logos.guidelines.map((guideline) => (
              <li>
                <svg
                  xmlns="http://www.w3.org/2000/svg"
                  width="16"
                  height="16"
                  viewBox="0 0 24 24"
                  fill="none"
                  stroke="currentColor"
                  stroke-width="2"
                  stroke-linecap="round"
                  stroke-linejoin="round"
                >
                  <polyline points="20 6 9 17 4 12" />
                </svg>
                {guideline}
              </li>
            ))
          }
        </ul>
      </div>
    </section>

    <section id="colors" class="section">
      <h2>{brandData.ui.sections.colors}</h2>
      <div class="color-intro">
        <p>{brandData.colors.intro}</p>
      </div>
      <div class="content">
        {/* Dynamic color grids that adjust based on the number of colors */}
        <ColorGrid
          colors={brandData.colors.primary}
          category="primary"
          title={brandData.ui.sections.primaryColors}
        />

        <ColorGrid
          colors={brandData.colors.accent}
          category="accent"
          title={brandData.ui.sections.accentColors}
        />

        <ColorGrid
          colors={brandData.colors.neutral}
          category="neutral"
          title={brandData.ui.sections.neutralColors}
        />
      </div>
    </section>

    <section id="typography" class="section">
      <h2>{brandData.ui.sections.typography}</h2>
      <div class="typography-intro">
        <p>{brandData.typography.intro}</p>
      </div>
      <div class="content">
        <div class="font-family-section">
          <div class="font-family-card">
            <div class="font-family-header">
              <h3>{brandData.typography.families.heading.title}</h3>
              <p class="font-description">
                {brandData.typography.families.heading.description}
              </p>
            </div>
            <div class="font-preview">
              <div class="font-sample heading-sample">
                {brandData.typography.families.heading.sample}
              </div>
              <div class="font-weights">
                {
                  brandData.typography.families.heading.weights.map(
                    (weight) => (
                      <span
                        style={`font-weight: ${weight === "Regular" ? "400" : weight === "Medium" ? "500" : weight === "Semibold" ? "600" : "700"};`}
                      >
                        {weight}
                      </span>
                    ),
                  )
                }
              </div>
            </div>
            <div class="download-links">
              <!-- <a href={brandData.typography.downloads.heading.web.url} class="download-link" download={brandData.typography.downloads.heading.web.iconType === 'download' ? true : null}>
								{brandData.typography.downloads.heading.web.iconType === 'download' ? (
									<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="M21 15v4a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2v-4"></path><polyline points="7 10 12 15 17 10"></polyline><line x1="12" y1="15" x2="12" y2="3"></line></svg>
								) : (
									<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><circle cx="12" cy="12" r="10"></circle><line x1="2" y1="12" x2="22" y2="12"></line><path d="M12 2a15.3 15.3 0 0 1 4 10 15.3 15.3 0 0 1-4 10 15.3 15.3 0 0 1-4-10 15.3 15.3 0 0 1 4-10z"></path></svg>
								)}
								{brandData.ui.buttons.downloadWebFonts}
							</a> -->
              <a
                href={brandData.typography.downloads.heading.desktop.url}
                class="download-link"
                download={brandData.typography.downloads.heading.desktop
                  .iconType === "download"
                  ? true
                  : null}
              >
                {
                  brandData.typography.downloads.heading.desktop.iconType ===
                  "download" ? (
                    <svg
                      xmlns="http://www.w3.org/2000/svg"
                      width="16"
                      height="16"
                      viewBox="0 0 24 24"
                      fill="none"
                      stroke="currentColor"
                      stroke-width="2"
                      stroke-linecap="round"
                      stroke-linejoin="round"
                    >
                      <>
                        <path d="M21 15v4a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2v-4" />
                        <polyline points="7 10 12 15 17 10" />
                        <line x1="12" y1="15" x2="12" y2="3" />
                      </>
                    </svg>
                  ) : (
                    <svg
                      xmlns="http://www.w3.org/2000/svg"
                      width="16"
                      height="16"
                      viewBox="0 0 24 24"
                      fill="none"
                      stroke="currentColor"
                      stroke-width="2"
                      stroke-linecap="round"
                      stroke-linejoin="round"
                    >
                      <>
                        <circle cx="12" cy="12" r="10" />
                        <line x1="2" y1="12" x2="22" y2="12" />
                        <path d="M12 2a15.3 15.3 0 0 1 4 10 15.3 15.3 0 0 1-4 10 15.3 15.3 0 0 1-4-10 15.3 15.3 0 0 1 4-10z" />
                      </>
                    </svg>
                  )
                }
                {brandData.ui.buttons.downloadDesktopFonts}
              </a>
              <a
                href={brandData.typography.downloads.heading.googleFonts.url}
                class="download-link"
                target="_blank"
                rel="noopener noreferrer"
              >
                <svg
                  xmlns="http://www.w3.org/2000/svg"
                  width="16"
                  height="16"
                  viewBox="0 0 24 24"
                  fill="none"
                  stroke="currentColor"
                  stroke-width="2"
                  stroke-linecap="round"
                  stroke-linejoin="round"
                  ><circle cx="12" cy="12" r="10"></circle><line
                    x1="2"
                    y1="12"
                    x2="22"
                    y2="12"></line><path
                    d="M12 2a15.3 15.3 0 0 1 4 10 15.3 15.3 0 0 1-4 10 15.3 15.3 0 0 1-4-10 15.3 15.3 0 0 1 4-10z"
                  ></path></svg
                >
                {brandData.ui.buttons.viewGoogleFonts}
              </a>
            </div>
          </div>

          <div class="font-family-card">
            <div class="font-family-header">
              <h3>{brandData.typography.families.body.title}</h3>
              <p class="font-description">
                {brandData.typography.families.body.description}
              </p>
            </div>
            <div class="font-preview">
              <div class="font-sample body-sample">
                {brandData.typography.families.body.sample}
              </div>
              <div class="font-weights">
                {
                  brandData.typography.families.body.weights.map((weight) => (
                    <span
                      style={`font-weight: ${weight === "Regular" ? "400" : weight === "Medium" ? "500" : weight === "Semibold" ? "600" : "700"};`}
                    >
                      {weight}
                    </span>
                  ))
                }
              </div>
            </div>
            <div class="download-links">
              <!-- <a href={brandData.typography.downloads.body.web.url} class="download-link" download={brandData.typography.downloads.body.web.iconType === 'download' ? true : null}>
								{brandData.typography.downloads.body.web.iconType === 'download' ? (
									<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="M21 15v4a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2v-4"></path><polyline points="7 10 12 15 17 10"></polyline><line x1="12" y1="15" x2="12" y2="3"></line></svg>
								) : (
									<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><circle cx="12" cy="12" r="10"></circle><line x1="2" y1="12" x2="22" y2="12"></line><path d="M12 2a15.3 15.3 0 0 1 4 10 15.3 15.3 0 0 1-4 10 15.3 15.3 0 0 1-4-10 15.3 15.3 0 0 1 4-10z"></path></svg>
								)}
								{brandData.ui.buttons.downloadWebFonts}
							</a> -->
              <a
                href={brandData.typography.downloads.body.desktop.url}
                class="download-link"
                download={brandData.typography.downloads.body.desktop
                  .iconType === "download"
                  ? true
                  : null}
              >
                {
                  brandData.typography.downloads.body.desktop.iconType ===
                  "download" ? (
                    <svg
                      xmlns="http://www.w3.org/2000/svg"
                      width="16"
                      height="16"
                      viewBox="0 0 24 24"
                      fill="none"
                      stroke="currentColor"
                      stroke-width="2"
                      stroke-linecap="round"
                      stroke-linejoin="round"
                    >
                      <>
                        <path d="M21 15v4a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2v-4" />
                        <polyline points="7 10 12 15 17 10" />
                        <line x1="12" y1="15" x2="12" y2="3" />
                      </>
                    </svg>
                  ) : (
                    <svg
                      xmlns="http://www.w3.org/2000/svg"
                      width="16"
                      height="16"
                      viewBox="0 0 24 24"
                      fill="none"
                      stroke="currentColor"
                      stroke-width="2"
                      stroke-linecap="round"
                      stroke-linejoin="round"
                    >
                      <>
                        <circle cx="12" cy="12" r="10" />
                        <line x1="2" y1="12" x2="22" y2="12" />
                        <path d="M12 2a15.3 15.3 0 0 1 4 10 15.3 15.3 0 0 1-4 10 15.3 15.3 0 0 1-4-10 15.3 15.3 0 0 1 4-10z" />
                      </>
                    </svg>
                  )
                }
                {brandData.ui.buttons.downloadDesktopFonts}
              </a>
              <a
                href={brandData.typography.downloads.body.googleFonts.url}
                class="download-link"
                target="_blank"
                rel="noopener noreferrer"
              >
                <svg
                  xmlns="http://www.w3.org/2000/svg"
                  width="16"
                  height="16"
                  viewBox="0 0 24 24"
                  fill="none"
                  stroke="currentColor"
                  stroke-width="2"
                  stroke-linecap="round"
                  stroke-linejoin="round"
                  ><circle cx="12" cy="12" r="10"></circle><line
                    x1="2"
                    y1="12"
                    x2="22"
                    y2="12"></line><path
                    d="M12 2a15.3 15.3 0 0 1 4 10 15.3 15.3 0 0 1-4 10 15.3 15.3 0 0 1-4-10 15.3 15.3 0 0 1 4-10z"
                  ></path></svg
                >
                {brandData.ui.buttons.viewGoogleFonts}
              </a>
            </div>
          </div>
        </div>
        <div class="typography-guidelines">
          <h3>{brandData.ui.sections.typographyGuidelines}</h3>
          <ul class="guidelines-list">
            {
              brandData.typography.guidelines.map((guideline) => (
                <li>
                  <svg
                    xmlns="http://www.w3.org/2000/svg"
                    width="16"
                    height="16"
                    viewBox="0 0 24 24"
                    fill="none"
                    stroke="currentColor"
                    stroke-width="2"
                    stroke-linecap="round"
                    stroke-linejoin="round"
                  >
                    <polyline points="20 6 9 17 4 12" />
                  </svg>
                  {guideline}
                </li>
              ))
            }
          </ul>
        </div>
      </div>
    </section>
    <section id="mockups" class="section">
      <h2>{brandData.ui.sections.mockups || "Aplicações"}</h2>
      <p class="mockup-intro">
        {brandData.mockups.intro || "Descrição das aplicações"}
      </p>
      <!-- Mockup slider -->
      <div class="mockup-content content">
        <div class="splide" id="mockup-slider">
          <div class="splide__track">
            <ul class="splide__list">
              {
                mockupPaths.map((path) => (
                  <li class="splide__slide">
                    <img src={path} alt="Aplicação da marca" loading="lazy" />
                  </li>
                ))
              }
            </ul>
          </div>
        </div>
      </div>
    </section>
  </div>
</Layout>

<script src="/js/colorManager.js" type="module" is:inline></script>

<script is:inline>
  // Add client-side JavaScript for copy to clipboard functionality
  document.addEventListener("DOMContentLoaded", () => {
    // Handle copy to clipboard
    const copyButtons = document.querySelectorAll(".copy-btn");
    copyButtons.forEach((button) => {
      button.addEventListener("click", () => {
        const colorValueElement = button.closest(".color-value");
        if (!colorValueElement) return;

        const colorValue = colorValueElement.getAttribute("data-clipboard");
        if (!colorValue) return;

        navigator.clipboard
          .writeText(colorValue)
          .then(() => {
            // Show success feedback
            const originalHTML = button.innerHTML;
            button.innerHTML =
              '<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="#10b981" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><polyline points="20 6 9 17 4 12"></polyline></svg>';

            // Use setAttribute for TypeScript compatibility
            button.setAttribute("style", "color: #10b981 !important"); // Green color

            setTimeout(() => {
              button.innerHTML = originalHTML;
              button.setAttribute("style", ""); // Reset style
            }, 2000);
          })
          .catch((err) => {
            console.error("Failed to copy: ", err);
            // Provide visual feedback even if clipboard fails
            alert("Valor da cor: " + colorValue);
          });
      });
    });

    // Smooth scrolling for anchor links
    const anchorLinks = document.querySelectorAll('a[href^="#"]');
    anchorLinks.forEach((link) => {
      link.addEventListener("click", function (e) {
        e.preventDefault();
        const targetId = this.getAttribute("href");
        if (!targetId) return;

        const targetElement = document.querySelector(targetId);
        if (targetElement) {
          const offsetTop =
            targetElement.getBoundingClientRect().top + window.pageYOffset;
          window.scrollTo({
            top: offsetTop - 80, // Adjust for fixed header
            behavior: "smooth",
          });
        }
      });
    });

    // Add touch feedback for mobile devices
    const allButtons = document.querySelectorAll(
      ".btn, .download-link, .copy-btn",
    );
    allButtons.forEach((button) => {
      button.addEventListener("touchstart", () => {
        button.classList.add("touch-active");
      });

      button.addEventListener("touchend", () => {
        button.classList.remove("touch-active");
      });
    });
  });

  document.addEventListener("DOMContentLoaded", function () {
    new Splide("#mockup-slider", {
      type: "loop",
      perPage: 1,
      gap: "1rem",
      autoplay: false,
      interval: 4000,
      pauseOnHover: true,
      arrows: true,
      pagination: true,
    }).mount();
  });
</script>

<script>
  // Add event listener for theme changes to update colors
  document.addEventListener("DOMContentLoaded", () => {
    // Initial update
    updateThemeSpecificElements();

    // Listen for theme toggle clicks
    const themeToggle = document.getElementById("theme-toggle");
    if (themeToggle) {
      themeToggle.addEventListener("click", () => {
        // Allow a small delay for the class to be applied
        setTimeout(updateThemeSpecificElements, 50);
      });
    }

    function updateThemeSpecificElements() {
      // Update any theme-specific elements that might need JavaScript
      const isDarkMode =
        document.documentElement.classList.contains("dark-mode");

      // Example: Update card backgrounds if needed
      document.querySelectorAll(".usage-card").forEach((card) => {
        (card as HTMLElement).style.backgroundColor = isDarkMode
          ? "var(--secondary-bg)"
          : "var(--background)";
      });
    }
  });
</script>

<script src="/js/themeManager.js" is:inline></script>

<style>
  .mockup-content {
    padding: 0;
    border-radius: var(--radius-lg);
    overflow: hidden;
    background: transparent;
  }

  /* Slider customization */
  .splide__slide {
    display: flex;
    justify-content: center;
    align-items: center;
    height: 640px; /* Set a fixed height for all slides */
    border-radius: var(--radius-lg);
    overflow: hidden;
  }

  .splide__slide img {
    object-fit: contain; /* Maintain aspect ratio */
    max-width: 100%;
  }

  /* Make slider responsive */
  @media (max-width: 768px) {
    .splide__slide {
      height: 480px; /* Smaller height on mobile */
    }
  }

  @media (max-width: 480px) {
    .splide__track {
      max-height: 250px;
      border-radius: var(--radius-lg);
    }

    .splide__slide {
      height: 250px; /* Even smaller on very small screens */
      border-radius: var(--radius-lg);
    }

    .splide__slide img {
      max-width: none;
      max-height: 100%;
    }
  }
</style>
