---
import brandData from "../data/brand.json";
import ThemeToggle from "../components/ThemeToggle.astro";
import "../styles/global.css";

// Get default theme from brand.json
const defaultTheme = brandData.ui.theme?.defaultMode || "light";
---

<!doctype html>
<html lang="pt-BR" class={defaultTheme === "dark" ? "dark-mode" : ""}>
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width" />
    <!-- Favicon and touch icons -->
    <link rel="icon" type="image/png" href="/favicon-96x96.png" sizes="96x96" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <link rel="shortcut icon" href="/favicon.ico" />
    <link rel="apple-touch-icon" sizes="180x180" href="/apple-touch-icon.png" />
    <link rel="manifest" href="/site.webmanifest" />
    <!-- Open Graph meta tags -->
    <meta property="og:title" content={Astro.props.title} />
    <meta property="og:description" content={Astro.props.description} />
    <meta
      property="og:image"
      content="/brandguide-template-ogimage_tiny.webp"
    />
    <meta name="generator" content={Astro.generator} />
    <link rel="preconnect" href="https://fonts.googleapis.com" />
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
    <link
      href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap"
      rel="stylesheet"
    />
    <title>{brandData.companyName} {brandData.ui.meta.title}</title>
    <script src="/js/colorManager.js" type="module" is:inline></script>

    <!-- Hidden element to store brand data for JavaScript access -->
    <script
      id="brand-data"
      type="application/json"
      is:inline
      set:html={JSON.stringify(brandData)}
    />

    <!-- Initialize color manager with brand data -->
    <script is:inline>
      document.addEventListener("DOMContentLoaded", function () {
        try {
          // Get brand data from the hidden JSON element
          const brandDataElement = document.getElementById("brand-data");
          if (brandDataElement) {
            const brandData = JSON.parse(brandDataElement.textContent || "{}");
            console.log("Brand data loaded from inline JSON");

            // Initialize color manager with the colors from brand data
            if (window.colorManagerModule) {
              window.colorManager = window.colorManagerModule.initColorManager(
                brandData.colors,
              );
              console.log("Color manager initialized");

              // Apply theme-specific colors
              const isDarkMode =
                document.documentElement.classList.contains("dark-mode");
              if (isDarkMode) {
                window.colorManagerModule.updateSvgElements();
              }
            } else {
              console.error("Color manager module not available");
            }
          }
        } catch (error) {
          console.error("Error loading brand data:", error);
        }
      });
    </script>

    <!-- Theme management script -->
    <script is:inline>
      // Check for saved theme preference or use default from brand data
      const savedTheme = localStorage.getItem("theme");
      const defaultTheme = document.documentElement.classList.contains(
        "dark-mode",
      )
        ? "dark"
        : "light";
      const theme = savedTheme || defaultTheme;

      // Apply theme
      if (theme === "dark") {
        document.documentElement.classList.add("dark-mode");
      } else {
        document.documentElement.classList.remove("dark-mode");
      }

      // Add class for transitions after initial load
      document.addEventListener("DOMContentLoaded", () => {
        document.documentElement.classList.add("theme-transition");
      });
    </script>

    <!-- Add theme transition styles -->
    <style is:inline>
      /* Add base transition styles for theme switching */
      html {
        transition: background-color 0.3s ease;
      }
      body {
        transition:
          background-color 0.3s ease,
          color 0.3s ease;
      }
      /* Ensure content doesn't flash during theme change */
      .theme-transition * {
        transition:
          background-color 0.3s ease,
          color 0.3s ease,
          border-color 0.3s ease;
      }
    </style>
  </head>
  <body>
    <header>
      <nav>
        <div class="nav-content">
          <a href="/" class="logo">
            <img
              src="/assets/logo-primary.svg"
              alt="Logotipo {brandData.companyName}"
              width="150"
              height="45"
              class="logo-light"
            />
            <img
              src="/assets/logo-dark.svg"
              alt="Logotipo {brandData.companyName}"
              width="150"
              height="45"
              class="logo-dark"
              style="display: none;"
            />
          </a>
          <div class="nav-actions">
            <div class="nav-links">
              <a href="#logos" class="nav-link"
                >{brandData.ui.navigation.links.logos}</a
              >
              <a href="#colors" class="nav-link"
                >{brandData.ui.navigation.links.colors}</a
              >
              <a href="#typography" class="nav-link"
                >{brandData.ui.navigation.links.typography}</a
              >
            </div>

            <ThemeToggle />
            <button class="mobile-menu-toggle" aria-label="Alternar menu">
              <svg
                xmlns="http://www.w3.org/2000/svg"
                width="24"
                height="24"
                viewBox="0 0 24 24"
                fill="none"
                stroke="currentColor"
                stroke-width="2"
                stroke-linecap="round"
                stroke-linejoin="round"
                ><line x1="3" y1="12" x2="21" y2="12"></line><line
                  x1="3"
                  y1="6"
                  x2="21"
                  y2="6"></line><line x1="3" y1="18" x2="21" y2="18"
                ></line></svg
              >
            </button>
          </div>
        </div>
      </nav>
    </header>
    <main>
      <slot />
    </main>
    <footer>
      <div class="footer-content">
        <div class="footer-logo">
          <img
            src="/assets/logo-dark.svg"
            alt="Logotipo {brandData.companyName}"
            width="150"
            height="45"
          />
        </div>
        <div class="footer-links">
          <div class="footer-section">
            <h3>{brandData.ui.footer.brandAssets}</h3>
            <ul>
              <li>
                <a href="#logos">{brandData.ui.navigation.links.logos}</a>
              </li>
              <li>
                <a href="#colors">{brandData.ui.navigation.links.colors}</a>
              </li>
              <li>
                <a href="#typography"
                  >{brandData.ui.navigation.links.typography}</a
                >
              </li>
            </ul>
          </div>
          <div class="footer-section">
            <h3>{brandData.ui.footer.resources}</h3>
            <ul>
              <li><a href="#">{brandData.ui.footer.downloadAllAssets}</a></li>
              <li>
                <a href={brandData.ui.footer.PDFurl} target="_blank"
                  >{brandData.ui.footer.brandGuidelinesPdf}</a
                >
              </li>
              <li>
                <a href={`mailto:${brandData.ui.footer.contactMail}`}
                  >{brandData.ui.footer.contactBrandTeam}</a
                >
              </li>
            </ul>
          </div>
        </div>
      </div>
      <div class="footer-bottom">
        <p set:html={brandData.ui.footer.copyright} />
      </div>
    </footer>
  </body>

  <style
    is:global
    define:vars={{ primaryColor: brandData.colors.primary?.[0]?.hex }}
  >
    /* Override primary color from brand data */
    :root {
      --primary: var(--primaryColor, #2563eb);
      --primary-light: color-mix(in srgb, var(--primary) 70%, white);
      --primary-dark: color-mix(in srgb, var(--primary) 80%, black);
    }
  </style>

  <script is:inline>
    // Mobile menu toggle
    document.addEventListener("DOMContentLoaded", function () {
      // Handle mobile menu toggle
      const mobileMenuToggle = document.querySelector(".mobile-menu-toggle");
      const navLinks = document.querySelector(".nav-links");

      if (mobileMenuToggle && navLinks) {
        mobileMenuToggle.addEventListener("click", function (e) {
          e.preventDefault();
          e.stopPropagation();
          navLinks.classList.toggle("active");

          // Toggle aria-expanded attribute for accessibility
          const isExpanded = navLinks.classList.contains("active");
          mobileMenuToggle.setAttribute("aria-expanded", isExpanded);

          // Add a class to the body to prevent scrolling when menu is open
          if (isExpanded) {
            document.body.classList.add("menu-open");
          } else {
            document.body.classList.remove("menu-open");
          }
        });
      }

      // Use color manager from global object
      // Apply CSS variables from color manager if available
      if (window.colorManager) {
        const colorData = window.colorManager.getColorData();
        window.colorManagerModule.updateCSSVariables(colorData);
      }

      // Close mobile menu when clicking outside
      document.addEventListener("click", (e) => {
        if (navLinks && navLinks.classList.contains("active")) {
          if (!e.target.closest("nav")) {
            navLinks.classList.remove("active");
            document.body.classList.remove("menu-open");
            if (mobileMenuToggle) {
              mobileMenuToggle.setAttribute("aria-expanded", "false");
            }
          }
        }
      });

      // Close mobile menu when clicking on a nav link
      const navLinkItems = document.querySelectorAll(".nav-link");
      navLinkItems.forEach((link) => {
        link.addEventListener("click", () => {
          if (window.innerWidth <= 768 && navLinks) {
            navLinks.classList.remove("active");
            document.body.classList.remove("menu-open");
            if (mobileMenuToggle) {
              mobileMenuToggle.setAttribute("aria-expanded", "false");
            }
          }
        });
      });

      // Highlight active nav link based on scroll position
      const sections = document.querySelectorAll("section[id]");
      const navItems = document.querySelectorAll(".nav-link");

      function highlightNavOnScroll() {
        let scrollPosition = window.scrollY;

        sections.forEach((section) => {
          const sectionTop = section.offsetTop - 100;
          const sectionHeight = section.offsetHeight;
          const sectionId = section.getAttribute("id");

          if (
            scrollPosition >= sectionTop &&
            scrollPosition < sectionTop + sectionHeight
          ) {
            navItems.forEach((item) => {
              item.classList.remove("active-section");
              if (item.getAttribute("href") === `#${sectionId}`) {
                item.classList.add("active-section");
              }
            });
          }
        });
      }

      window.addEventListener("scroll", highlightNavOnScroll);
      highlightNavOnScroll(); // Run once on page load

      // Handle window resize - reset menu state if window is resized above mobile breakpoint
      window.addEventListener("resize", () => {
        if (
          window.innerWidth > 768 &&
          navLinks &&
          navLinks.classList.contains("active")
        ) {
          navLinks.classList.remove("active");
          document.body.classList.remove("menu-open");
          if (mobileMenuToggle) {
            mobileMenuToggle.setAttribute("aria-expanded", "false");
          }
        }
      });
    });
  </script>

  <script is:inline>
    // Update logo when theme changes
    document.addEventListener("DOMContentLoaded", function () {
      const themeToggle = document.getElementById("theme-toggle");
      const logoLight = document.querySelector(".logo-light");
      const logoDark = document.querySelector(".logo-dark");

      // Function to update logo visibility based on theme
      function updateLogoVisibility() {
        const isDarkMode =
          document.documentElement.classList.contains("dark-mode");

        if (logoLight && logoDark) {
          logoLight.style.display = isDarkMode ? "none" : "block";
          logoDark.style.display = isDarkMode ? "block" : "none";
        }
      }

      // Update initially
      updateLogoVisibility();

      // Update when theme toggle is clicked
      if (themeToggle) {
        themeToggle.addEventListener("click", updateLogoVisibility);
      }

      // Also observe theme changes that might happen from other sources
      const observer = new MutationObserver(function (mutations) {
        mutations.forEach(function (mutation) {
          if (mutation.attributeName === "class") {
            updateLogoVisibility();
          }
        });
      });

      observer.observe(document.documentElement, { attributes: true });
    });
  </script>
</html>
