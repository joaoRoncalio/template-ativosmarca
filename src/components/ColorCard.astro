---
// Define the props for the ColorCard component
interface Props {
  color: {
    name: string;
    hex: string;
    cmyk: string;
    description: string;
  };
  category: string;
}

const { color, category } = Astro.props;
---

<div class="color-card">
  <div class="color-preview" style={`background-color: ${color.hex};`}></div>
  <div class="color-info">
    <h4>{color.name}</h4>
    <div class="color-values">
      <div class="color-value">
        <span class="label">HEX</span>
        <span class="value">{color.hex}</span>
        <button
          class="copy-btn"
          data-value={color.hex}
          aria-label="Copy HEX value"
        >
          <svg
            xmlns="http://www.w3.org/2000/svg"
            width="16"
            height="16"
            viewBox="0 0 24 24"
            fill="none"
            stroke="currentColor"
            stroke-width="2"
            stroke-linecap="round"
            stroke-linejoin="round"
          >
            <rect x="9" y="9" width="13" height="13" rx="2" ry="2"></rect>
            <path d="M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1"
            ></path>
          </svg>
        </button>
      </div>
      {
        color.rgb && (
          <div class="color-value">
            <span class="label">RGB</span>
            <span class="value">{color.rgb}</span>
            <button
              class="copy-btn"
              data-value={color.rgb}
              aria-label="Copy RGB value"
            >
              <svg
                xmlns="http://www.w3.org/2000/svg"
                width="16"
                height="16"
                viewBox="0 0 24 24"
                fill="none"
                stroke="currentColor"
                stroke-width="2"
                stroke-linecap="round"
                stroke-linejoin="round"
              >
                <rect x="9" y="9" width="13" height="13" rx="2" ry="2" />
                <path d="M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1" />
              </svg>
            </button>
          </div>
        )
      }
      {
        color.cmyk && (
          <div class="color-value">
            <span class="label">CMYK</span>
            <span class="value">{color.cmyk}</span>
            <button
              class="copy-btn"
              data-value={color.cmyk}
              aria-label="Copy CMYK value"
            >
              <svg
                xmlns="http://www.w3.org/2000/svg"
                width="16"
                height="16"
                viewBox="0 0 24 24"
                fill="none"
                stroke="currentColor"
                stroke-width="2"
                stroke-linecap="round"
                stroke-linejoin="round"
              >
                <rect x="9" y="9" width="13" height="13" rx="2" ry="2" />
                <path d="M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1" />
              </svg>
            </button>
          </div>
        )
      }
    </div>
  </div>
</div>

<style>
  .color-card {
    background-color: var(--background);
    border-radius: var(--radius);
    overflow: hidden;
    box-shadow: var(--shadow-sm);
    transition:
      background-color 0.3s ease,
      box-shadow 0.3s ease,
      transform 0.2s ease;
  }

  .color-card:hover {
    box-shadow: var(--shadow);
    transform: translateY(-2px);
  }

  .color-preview {
    height: 120px;
    width: 100%;
    border-bottom: 1px solid var(--border);
  }

  .color-info {
    padding: 1.25rem;
  }

  h4 {
    margin: 0 0 1rem;
    font-size: var(--font-size-h4);
    color: var(--text);
  }

  .color-values {
    display: flex;
    flex-direction: column;
    gap: 0.75rem;
  }

  .color-value {
    display: flex;
    align-items: center;
    justify-content: space-between;
    font-size: var(--font-size-small);
    background-color: rgba(0, 0, 0, 0.03);
    border-radius: var(--radius-sm);
    padding: 0.5rem 0.75rem;
    margin-bottom: 0.5rem;
  }

  .label {
    font-weight: 600;
    color: var(--text);
    width: 50px;
  }

  .value {
    font-family: monospace;
    color: var(--text-light);
    flex: 1;
    margin: 0 0.5rem;
    font-weight: 500;
  }

  .copy-btn {
    background: none;
    border: none;
    cursor: pointer;
    color: var(--primary);
    padding: 0.25rem;
    border-radius: var(--radius-sm);
    display: flex;
    align-items: center;
    justify-content: center;
    transition: background-color 0.2s ease;
  }

  .copy-btn:hover {
    background-color: var(--secondary-bg);
  }

  /* Dark mode specific styles */
  :global(.dark-mode) .color-card {
    background-color: var(--secondary-bg);
    border: 1px solid var(--border);
  }

  :global(.dark-mode) .color-preview {
    border-bottom: 1px solid var(--border);
  }

  :global(.dark-mode) .label {
    color: var(--text);
  }

  :global(.dark-mode) .value {
    color: var(--text-light);
  }

  :global(.dark-mode) .copy-btn:hover {
    background-color: rgba(255, 255, 255, 0.1);
  }

  :global(.dark-mode) .color-value {
    background-color: rgba(255, 255, 255, 0.05);
  }
</style>

<script>
  // Initialize copy buttons
  document.addEventListener("DOMContentLoaded", () => {
    document.querySelectorAll(".copy-btn").forEach((button) => {
      button.addEventListener("click", () => {
        const value = button.getAttribute("data-value");
        if (value) {
          navigator.clipboard.writeText(value).then(() => {
            // Visual feedback for copy
            const originalColor = button.style.color;
            button.style.color = "var(--accent-green)";
            setTimeout(() => {
              button.style.color = originalColor;
            }, 1000);
          });
        }
      });
    });
  });
</script>
