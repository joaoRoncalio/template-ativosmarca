---
// Define the props for the ColorCard component
interface Props {
  color: {
    name: string;
    hex: string;
    cmyk?: string;
    rgb?: string;
    description?: string;
  };
  category: string;
}

const { color, category } = Astro.props;
---

<div class="color-card">
  <div class="color-preview" style={`background-color: ${color.hex};`}></div>
  <div class="color-info">
    <h4>{color.name}</h4>
    <div class="color-values">
      <div class="color-value">
        <span class="label">HEX</span>
        <span class="value">{color.hex}</span>
        <button
          class="copy-btn"
          data-value={color.hex}
          aria-label="Copy HEX value"
        >
          <svg
            xmlns="http://www.w3.org/2000/svg"
            width="16"
            height="16"
            viewBox="0 0 24 24"
            fill="none"
            stroke="currentColor"
            stroke-width="2"
            stroke-linecap="round"
            stroke-linejoin="round"
          >
            <rect x="9" y="9" width="13" height="13" rx="2" ry="2"></rect>
            <path d="M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1"
            ></path>
          </svg>
        </button>
      </div>
      {
        color.rgb && (
          <div class="color-value">
            <span class="label">RGB</span>
            <span class="value">{color.rgb}</span>
            <button
              class="copy-btn"
              data-value={color.rgb}
              aria-label="Copy RGB value"
            >
              <svg
                xmlns="http://www.w3.org/2000/svg"
                width="16"
                height="16"
                viewBox="0 0 24 24"
                fill="none"
                stroke="currentColor"
                stroke-width="2"
                stroke-linecap="round"
                stroke-linejoin="round"
              >
                <rect x="9" y="9" width="13" height="13" rx="2" ry="2" />
                <path d="M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1" />
              </svg>
            </button>
          </div>
        )
      }
      {
        color.cmyk && (
          <div class="color-value">
            <span class="label">CMYK</span>
            <span class="value">{color.cmyk}</span>
            <button
              class="copy-btn"
              data-value={color.cmyk}
              aria-label="Copy CMYK value"
            >
              <svg
                xmlns="http://www.w3.org/2000/svg"
                width="16"
                height="16"
                viewBox="0 0 24 24"
                fill="none"
                stroke="currentColor"
                stroke-width="2"
                stroke-linecap="round"
                stroke-linejoin="round"
              >
                <rect x="9" y="9" width="13" height="13" rx="2" ry="2" />
                <path d="M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1" />
              </svg>
            </button>
          </div>
        )
      }
    </div>
  </div>
</div>

<script>
  // Initialize copy buttons
  document.addEventListener("DOMContentLoaded", () => {
    document.querySelectorAll(".copy-btn").forEach((button) => {
      button.addEventListener("click", () => {
        const value = button.getAttribute("data-value");
        if (value) {
          navigator.clipboard.writeText(value).then(() => {
            // Visual feedback for copy
            const btn = button as HTMLElement;
            const originalHTML = btn.innerHTML;

            // Change to check mark icon
            btn.innerHTML =
              '<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="#10b981" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><polyline points="20 6 9 17 4 12"></polyline></svg>';
            btn.style.color = "var(--accent-green)";

            // Restore original icon after 2 seconds
            setTimeout(() => {
              btn.innerHTML = originalHTML;
              btn.style.color = "";
            }, 2000);
          });
        }
      });
    });
  });
</script>
