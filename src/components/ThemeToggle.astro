---
import brandData from "../data/brand.json";
const allowToggle = brandData.ui.theme?.allowUserToggle ?? true;
---

{
  allowToggle && (
    <button
      id="theme-toggle"
      aria-label="Toggle dark mode"
      class="theme-toggle"
    >
      <svg
        xmlns="http://www.w3.org/2000/svg"
        width="20"
        height="20"
        viewBox="0 0 24 24"
        fill="none"
        stroke="currentColor"
        stroke-width="2"
        stroke-linecap="round"
        stroke-linejoin="round"
        class="sun-icon"
      >
        <circle cx="12" cy="12" r="5" />
        <line x1="12" y1="1" x2="12" y2="3" />
        <line x1="12" y1="21" x2="12" y2="23" />
        <line x1="4.22" y1="4.22" x2="5.64" y2="5.64" />
        <line x1="18.36" y1="18.36" x2="19.78" y2="19.78" />
        <line x1="1" y1="12" x2="3" y2="12" />
        <line x1="21" y1="12" x2="23" y2="12" />
        <line x1="4.22" y1="19.78" x2="5.64" y2="18.36" />
        <line x1="18.36" y1="5.64" x2="19.78" y2="4.22" />
      </svg>
      <svg
        xmlns="http://www.w3.org/2000/svg"
        width="20"
        height="20"
        viewBox="0 0 24 24"
        fill="none"
        stroke="currentColor"
        stroke-width="2"
        stroke-linecap="round"
        stroke-linejoin="round"
        class="moon-icon"
      >
        <path d="M21 12.79A9 9 0 1 1 11.21 3 7 7 0 0 0 21 12.79z" />
      </svg>
    </button>
  )
}

<style>
  .theme-toggle {
    background: none;
    border: none;
    cursor: pointer;
    padding: 0.5rem;
    border-radius: var(--radius-sm);
    display: flex;
    align-items: center;
    justify-content: center;
    color: var(--text);
    transition:
      background-color 0.2s ease,
      color 0.2s ease;
  }

  .theme-toggle:hover {
    background-color: var(--secondary-bg);
  }

  .theme-toggle .sun-icon {
    display: none;
  }

  .theme-toggle .moon-icon {
    display: block;
  }

  :global(.dark-mode) .theme-toggle .sun-icon {
    display: block;
  }

  :global(.dark-mode) .theme-toggle .moon-icon {
    display: none;
  }

  /* Add transition for smooth theme switching */
  :global(html) {
    transition:
      background-color 0.3s ease,
      color 0.3s ease;
  }

  :global(body) {
    transition:
      background-color 0.3s ease,
      color 0.3s ease;
  }
</style>

<script>
  // Ensure the theme toggle is properly initialized
  document.addEventListener("DOMContentLoaded", () => {
    const themeToggle = document.getElementById("theme-toggle");
    if (themeToggle) {
      // Update aria-label based on current theme
      const updateAriaLabel = () => {
        const isDarkMode =
          document.documentElement.classList.contains("dark-mode");
        themeToggle.setAttribute(
          "aria-label",
          isDarkMode ? "Switch to light mode" : "Switch to dark mode",
        );
      };

      // Set initial aria-label
      updateAriaLabel();

      // Update aria-label when theme changes
      themeToggle.addEventListener("click", updateAriaLabel);
    }
  });
</script>
