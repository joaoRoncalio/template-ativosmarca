---
interface Props {
  logos: Record<string, any>;
  title: string;
}

const { logos, title } = Astro.props;

// Convert the logos object to an array with names, filtering out guidelines
const logoArray: Array<{
  name: string;
  svg?: string;
  png?: string;
  description?: string;
  background?: string;
  [key: string]: any;
}> = [];

// Process each logo entry
Object.entries(logos)
  .filter(([key]) => key !== "guidelines")
  .forEach(([key, logo]) => {
    // Skip if not an object
    if (!logo || typeof logo !== "object") return;

    // Create a new logo item with the name property
    const item: any = {
      name: key.charAt(0).toUpperCase() + key.slice(1),
    };

    // Copy all properties from the logo object
    for (const prop in logo) {
      if (Object.prototype.hasOwnProperty.call(logo, prop)) {
        item[prop] = (logo as any)[prop];
      }
    }

    logoArray.push(item);
  });

// Use a responsive grid layout that adapts to available space
const gridStyle = `grid-template-columns: repeat(auto-fit, minmax(min(100%, 340px), 1fr));`;
---

<div class="logo-section">
  <h3>{title}</h3>
  <div class="logo-variations" style={gridStyle}>
    {
      logoArray.map((logo) => (
        <div class="logo-card">
          <h4>{logo.name}</h4>
          <p>{logo.description}</p>

          <div
            class="logo-preview"
            class:list={[logo.background || "default-bg"]}
          >
            <img
              src={logo.svg}
              alt={`Logo ${logo.name}`}
              width="200"
              height="60"
            />
          </div>

          <div class="download-links">
            <a href={logo.svg} class="download-link" download>
              <svg
                xmlns="http://www.w3.org/2000/svg"
                width="16"
                height="16"
                viewBox="0 0 24 24"
                fill="none"
                stroke="currentColor"
                stroke-width="2"
                stroke-linecap="round"
                stroke-linejoin="round"
              >
                <path d="M21 15v4a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2v-4" />
                <polyline points="7 10 12 15 17 10" />
                <line x1="12" y1="15" x2="12" y2="3" />
              </svg>
              SVG
            </a>
            <a href={logo.png} class="download-link" download>
              <svg
                xmlns="http://www.w3.org/2000/svg"
                width="16"
                height="16"
                viewBox="0 0 24 24"
                fill="none"
                stroke="currentColor"
                stroke-width="2"
                stroke-linecap="round"
                stroke-linejoin="round"
              >
                <path d="M21 15v4a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2v-4" />
                <polyline points="7 10 12 15 17 10" />
                <line x1="12" y1="15" x2="12" y2="3" />
              </svg>
              PNG
            </a>
            <button class="download-link copy-svg-btn" data-svg-url={logo.svg}>
              <svg
                xmlns="http://www.w3.org/2000/svg"
                width="16"
                height="16"
                viewBox="0 0 24 24"
                fill="none"
                stroke="currentColor"
                stroke-width="2"
                stroke-linecap="round"
                stroke-linejoin="round"
              >
                <rect x="9" y="9" width="13" height="13" rx="2" ry="2" />
                <path d="M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1" />
              </svg>
              Copiar SVG
            </button>
          </div>
        </div>
      ))
    }
  </div>
</div>

<style>
  .background-selector {
    display: flex;
    align-items: center;
    margin-top: 1rem;
    font-size: var(--font-size-xs);
    color: var(--text-light);
  }

  .background-options {
    display: flex;
    gap: 0.5rem;
    margin-left: 0.5rem;
  }

  .bg-option {
    width: 24px;
    height: 24px;
    border-radius: 4px;
    cursor: pointer;
    border: 1px solid var(--border);
    display: flex;
    align-items: center;
    justify-content: center;
    font-size: 0;
    transition: transform 0.2s ease;
  }

  .bg-option:hover {
    transform: scale(1.1);
  }

  .bg-option.dark-bg {
    background-color: var(--text);
  }

  .bg-option.light-bg {
    background-color: white;
  }

  .bg-option:not(.dark-bg):not(.light-bg) {
    background-color: var(--secondary-bg);
  }

  .download-links {
    display: flex;
    gap: 1rem;
    margin-top: 1rem;
    flex-wrap: wrap;
  }

  button.download-link {
    cursor: pointer;
    font-family: inherit;
    border: none;
  }

  @media (max-width: 480px) {
    .download-links {
      flex-direction: column;
    }

    .copy-svg-btn {
      display: none;
    }
  }
</style>

<script>
  document.addEventListener("DOMContentLoaded", () => {
    // Handle SVG copy functionality
    const copySvgButtons = document.querySelectorAll(".copy-svg-btn");

    copySvgButtons.forEach((button) => {
      button.addEventListener("click", async () => {
        const svgUrl = button.getAttribute("data-svg-url");
        if (!svgUrl) return;

        try {
          // Fetch the SVG content
          const response = await fetch(svgUrl);
          const svgText = await response.text();

          // Copy to clipboard
          await navigator.clipboard.writeText(svgText);

          // Show success feedback
          const originalHTML = button.innerHTML;
          button.innerHTML =
            '<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="#10b981" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><polyline points="20 6 9 17 4 12"></polyline></svg> Copiado!';
          button.setAttribute("style", "color: #10b981 !important"); // Green color

          setTimeout(() => {
            button.innerHTML = originalHTML;
            button.setAttribute("style", ""); // Reset style
          }, 2000);
        } catch (err) {
          console.error("Failed to copy SVG:", err);
          alert("Não foi possível copiar o SVG. Tente novamente.");
        }
      });
    });
  });

  // Force logo card background in dark mode
  document.addEventListener("DOMContentLoaded", function () {
    const observer = new MutationObserver(function (mutations) {
      mutations.forEach(function (mutation) {
        if (
          mutation.attributeName === "class" &&
          document.documentElement.classList.contains("dark-mode")
        ) {
          document.querySelectorAll(".logo-card").forEach((card) => {
            (card as HTMLElement).style.backgroundColor = "transparent";
          });
        }
      });
    });

    observer.observe(document.documentElement, { attributes: true });

    // Also set initially
    if (document.documentElement.classList.contains("dark-mode")) {
      document.querySelectorAll(".logo-card").forEach((card) => {
        (card as HTMLElement).style.backgroundColor = "transparent";
      });
    }
  });
</script>
