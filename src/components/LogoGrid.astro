---
import DownloadButton from "./DownloadButton.astro";
// @ts-ignore - JSON import
import brandData from "../data/brand.json";

interface Props {
  logos: Record<string, any>;
  title: string;
}

const { logos, title } = Astro.props;

// Convert the logos object to an array with names, filtering out guidelines
const logoArray: Array<{
  name: string;
  description?: string;
  background?: string;
  [key: string]: any;
}> = [];

// Process each logo entry
Object.entries(logos)
  .filter(([key]) => key !== "guidelines")
  .forEach(([key, logo]) => {
    // Skip if not an object
    if (!logo || typeof logo !== "object") return;

    // Create a new logo item with the name property
    const item: any = {
      name: key.charAt(0).toUpperCase() + key.slice(1),
    };

    // Copy all properties from the logo object
    for (const prop in logo) {
      if (Object.prototype.hasOwnProperty.call(logo, prop)) {
        item[prop] = (logo as any)[prop];
      }
    }

    logoArray.push(item);
  });

// Use a responsive grid layout that adapts to available space
const gridStyle = `grid-template-columns: repeat(auto-fit, minmax(min(100%, 340px), 1fr));`;
---

<div class="logo-section">
  <h3>{title}</h3>
  <div class="logo-variations" style={gridStyle}>
    {
      logoArray.map((logo) => (
        <div class="logo-card">
          <h4>{logo.name}</h4>
          <p>{logo.description}</p>

          <div class="logo-container">
            <div
              class="logo-preview"
              class:list={[logo.background || "default-bg"]}
              data-logo-id={logo.name.toLowerCase()}
            >
              <img
                src={logo.svg}
                alt={`Logo ${logo.name}`}
                width="auto"
                height="auto"
                loading="lazy"
                class="logo-image"
              />
            </div>

            {brandData.ui.logoOptions?.allowColorChange !== false && (
              <div class="color-selector">
                {(
                  brandData.ui.logoOptions?.defaultColors || [
                    "primary",
                    "black",
                    "white",
                  ]
                ).map((color) => (
                  <button
                    class={`color-option ${color === "primary" ? "primary-color" : ""}`}
                    title={
                      color === "primary"
                        ? "Cor primÃ¡ria"
                        : color === "black"
                          ? "Preto"
                          : "Branco"
                    }
                    data-color={color}
                  />
                ))}
              </div>
            )}
          </div>

          <div class="download-links">
            {/* SVG Download Button */}
            {logo.svg && (
              <DownloadButton
                url={logo.svg}
                label={brandData.ui.buttons.downloadSvg}
                type="download"
                className="svg-download-btn"
                data-logo-svg={logo.svg}
                data-logo-name={logo.name}
              />
            )}

            {/* PNG Download Button */}
            {logo.png && (
              <DownloadButton
                url={logo.png}
                label={brandData.ui.buttons.downloadPng}
                type="download"
                className="png-download-btn"
              />
            )}

            {/* Copy SVG Button - always show if SVG is available */}
            {logo.svg && (
              <DownloadButton
                url={logo.svg}
                label="Copiar SVG"
                type="copy"
                className="copy-svg-btn"
                data-logo-svg={logo.svg}
              />
            )}
          </div>
        </div>
      ))
    }
  </div>
</div>

<style is:global>
  .logo-container {
    position: relative;
    display: flex;
    margin-bottom: 1.5rem;
  }

  .color-selector {
    position: absolute;
    right: 8px;
    top: 8px;
    display: flex;
    flex-direction: column;
    gap: 0.5rem;
    padding: 0.5rem;
    align-items: center;
    justify-content: center;
  }

  .color-option {
    width: 24px;
    height: 24px;
    border-radius: 50%;
    cursor: pointer;
    border: 1px solid #fff;
    outline: 1px solid var(--border);
    display: flex;
    align-items: center;
    justify-content: center;
    font-size: 0;
    transition: transform 0.2s ease;
    padding: 0;
    background-color: transparent;
  }

  .color-option:hover {
    transform: scale(1.1);
  }

  .color-option.primary-color {
    background-color: var(--primary);
  }

  .color-option[data-color="black"] {
    background-color: #000000;
  }

  .color-option[data-color="white"] {
    background-color: #ffffff;
  }

  .color-option.active {
    outline: 2px solid var(--primary);
    outline-offset: 2px;
  }

  @media (max-width: 480px) {
    .color-selector {
      display: none;
    }

    .logo-container {
      flex-direction: column;
    }

    .copy-svg-btn {
      display: none;
    }
  }
</style>

<script>
  document.addEventListener("DOMContentLoaded", () => {
    // Get brand data from the hidden JSON element
    const brandDataElement = document.getElementById("brand-data");
    const brandData = brandDataElement
      ? JSON.parse(brandDataElement.textContent || "{}")
      : {};
    const allowColorChange =
      brandData.ui?.logoOptions?.allowColorChange !== false;

    // Store modified SVGs for each logo and color
    const modifiedSvgs = new Map();

    // Function to modify SVG with selected color - available to all features
    async function modifySvg(svgUrl, color) {
      // Check if we already have this modified SVG
      const cacheKey = `${svgUrl}-${color}`;
      if (modifiedSvgs.has(cacheKey)) {
        return modifiedSvgs.get(cacheKey);
      }

      try {
        // Fetch the SVG content
        const response = await fetch(svgUrl);
        const svgText = await response.text();

        // Create a DOM parser to modify the SVG
        const parser = new DOMParser();
        const svgDoc = parser.parseFromString(svgText, "image/svg+xml");

        // Get primary color from CSS
        const primaryColor = getComputedStyle(document.documentElement)
          .getPropertyValue("--primary")
          .trim();

        // Apply the selected color to all paths, fills, and strokes
        let fillColor;
        if (color === "primary") {
          fillColor = primaryColor;
        } else if (color === "black") {
          fillColor = "#000000";
        } else if (color === "white") {
          fillColor = "#ffffff";
        }

        // Apply color to all SVG elements with fill or stroke
        const elements = svgDoc.querySelectorAll(
          "[fill]:not([fill='none']), [stroke]:not([stroke='none'])",
        );
        elements.forEach((el) => {
          if (el.hasAttribute("fill") && el.getAttribute("fill") !== "none") {
            el.setAttribute("fill", fillColor);
          }
          if (
            el.hasAttribute("stroke") &&
            el.getAttribute("stroke") !== "none"
          ) {
            el.setAttribute("stroke", fillColor);
          }
        });

        // Convert back to string
        const serializer = new XMLSerializer();
        const modifiedSvgText = serializer.serializeToString(svgDoc);

        // Cache the modified SVG
        modifiedSvgs.set(cacheKey, modifiedSvgText);

        return modifiedSvgText;
      } catch (err) {
        console.error("Failed to modify SVG:", err);
        return null;
      }
    }

    // Function to convert SVG to PNG - available to all features
    async function convertSvgToPng(svgText, maxWidth, maxHeight) {
      return new Promise((resolve, reject) => {
        try {
          // Create a Blob from the SVG string
          const svgBlob = new Blob([svgText], { type: "image/svg+xml" });
          const url = URL.createObjectURL(svgBlob);

          // Create an Image element to load the SVG
          const img = new Image();
          img.onload = () => {
            // Calculate dimensions that preserve aspect ratio
            const originalWidth = img.width;
            const originalHeight = img.height;
            const aspectRatio = originalWidth / originalHeight;

            let targetWidth = maxWidth || originalWidth;
            let targetHeight = maxHeight || originalHeight;

            // Adjust dimensions to maintain aspect ratio
            if (targetWidth / targetHeight > aspectRatio) {
              // Width is the limiting factor
              targetWidth = targetHeight * aspectRatio;
            } else {
              // Height is the limiting factor
              targetHeight = targetWidth / aspectRatio;
            }

            // Create a canvas with the calculated dimensions
            const canvas = document.createElement("canvas");
            canvas.width = targetWidth;
            canvas.height = targetHeight;

            // Draw the image on the canvas
            const ctx = canvas.getContext("2d");
            ctx.clearRect(0, 0, targetWidth, targetHeight);
            ctx.drawImage(img, 0, 0, targetWidth, targetHeight);

            // Convert canvas to PNG
            const pngUrl = canvas.toDataURL("image/png");

            // Clean up
            URL.revokeObjectURL(url);

            resolve(pngUrl);
          };

          img.onerror = (e) => {
            URL.revokeObjectURL(url);
            reject(new Error("Failed to load SVG"));
          };

          img.src = url;
        } catch (err) {
          reject(err);
        }
      });
    }

    // COLOR CHANGE FUNCTIONALITY - Only if enabled
    if (allowColorChange) {
      // Handle color selector functionality
      const colorOptions = document.querySelectorAll(".color-option");
      const logoImages = document.querySelectorAll(".logo-image");

      // Set primary color as active by default
      document
        .querySelectorAll(".color-option.primary-color")
        .forEach((option) => {
          option.classList.add("active");
        });

      colorOptions.forEach((option) => {
        option.addEventListener("click", async function () {
          const color = this.getAttribute("data-color");
          const logoCard = this.closest(".logo-card");
          const logoImage = logoCard.querySelector(".logo-image");
          const logoPreview = logoCard.querySelector(".logo-preview");
          const svgUrl = logoImage.getAttribute("src");
          // Get the original background class from the data attribute
          const originalBg =
            logoPreview.getAttribute("data-original-bg") ||
            (logoPreview.classList.contains("light-bg")
              ? "light-bg"
              : logoPreview.classList.contains("dark-bg")
                ? "dark-bg"
                : "default-bg");

          if (!svgUrl) return;

          // Update active state
          logoCard.querySelectorAll(".color-option").forEach((opt) => {
            opt.classList.remove("active");
          });
          this.classList.add("active");

          // Update background based on selected color
          if (color === "white") {
            // Store original background if not already stored
            if (!logoPreview.hasAttribute("data-original-bg")) {
              logoPreview.setAttribute("data-original-bg", originalBg);
            }
            // Set dark background for white logo
            logoPreview.classList.remove("default-bg", "light-bg");
            logoPreview.classList.add("dark-bg");
          } else {
            // For primary or black, restore the original background
            logoPreview.classList.remove("default-bg", "light-bg", "dark-bg");
            logoPreview.classList.add(originalBg);
          }

          // Modify the SVG with the selected color
          const modifiedSvgText = await modifySvg(svgUrl, color);

          if (modifiedSvgText) {
            // Create a blob URL for the modified SVG
            const blob = new Blob([modifiedSvgText], { type: "image/svg+xml" });
            const modifiedSvgUrl = URL.createObjectURL(blob);

            // Update the image source
            logoImage.src = modifiedSvgUrl;

            // Store the modified SVG in the logo card for download/copy buttons
            logoCard.setAttribute("data-current-svg", modifiedSvgText);
          }
        });
      });

      // Initialize all logos with primary color and store original backgrounds
      document.querySelectorAll(".logo-card").forEach(async (logoCard) => {
        const logoImage = logoCard.querySelector(".logo-image");
        const logoPreview = logoCard.querySelector(".logo-preview");
        const svgUrl = logoImage?.getAttribute("src");

        // Store the original background class
        if (logoPreview) {
          const originalBg = logoPreview.classList.contains("light-bg")
            ? "light-bg"
            : logoPreview.classList.contains("dark-bg")
              ? "dark-bg"
              : "default-bg";
          logoPreview.setAttribute("data-original-bg", originalBg);
        }

        if (svgUrl) {
          const modifiedSvgText = await modifySvg(svgUrl, "primary");

          if (modifiedSvgText) {
            // Create a blob URL for the modified SVG
            const blob = new Blob([modifiedSvgText], { type: "image/svg+xml" });
            const modifiedSvgUrl = URL.createObjectURL(blob);

            // Update the image source
            logoImage.src = modifiedSvgUrl;

            // Store the modified SVG in the logo card for download/copy buttons
            logoCard.setAttribute("data-current-svg", modifiedSvgText);
          }
        }
      });
    }

    // SVG DOWNLOAD FUNCTIONALITY - Works regardless of allowColorChange
    document.addEventListener("click", async function (event) {
      const target = event.target.closest(".svg-download-btn");
      if (!target) return;

      // Prevent default link behavior
      event.preventDefault();

      const logoCard = target.closest(".logo-card");
      const logoName = target.getAttribute("data-logo-name");
      const currentSvg = logoCard.getAttribute("data-current-svg");
      const originalSvgUrl = target.getAttribute("data-logo-svg");

      if (currentSvg) {
        // Download the modified SVG
        const blob = new Blob([currentSvg], { type: "image/svg+xml" });
        const url = URL.createObjectURL(blob);
        const a = document.createElement("a");
        a.href = url;
        a.download = `${logoName.toLowerCase().replace(/\s+/g, "-")}.svg`;
        document.body.appendChild(a);
        a.click();
        document.body.removeChild(a);
        URL.revokeObjectURL(url);
      } else if (originalSvgUrl) {
        // If no modified SVG, check if color changes are enabled
        if (allowColorChange) {
          // Get the active color and modify the original
          const activeColorOption = logoCard.querySelector(
            ".color-option.active",
          );
          if (activeColorOption) {
            const color = activeColorOption.getAttribute("data-color");
            const modifiedSvgText = await modifySvg(originalSvgUrl, color);

            if (modifiedSvgText) {
              const blob = new Blob([modifiedSvgText], {
                type: "image/svg+xml",
              });
              const url = URL.createObjectURL(blob);
              const a = document.createElement("a");
              a.href = url;
              a.download = `${logoName.toLowerCase().replace(/\s+/g, "-")}.svg`;
              document.body.appendChild(a);
              a.click();
              document.body.removeChild(a);
              URL.revokeObjectURL(url);

              // Store for future use
              logoCard.setAttribute("data-current-svg", modifiedSvgText);
              return;
            }
          }
        }

        // Fallback to original SVG (when color change is disabled or no color selected)
        const response = await fetch(originalSvgUrl);
        const svgText = await response.text();

        const blob = new Blob([svgText], { type: "image/svg+xml" });
        const url = URL.createObjectURL(blob);
        const a = document.createElement("a");
        a.href = url;
        a.download = `${logoName.toLowerCase().replace(/\s+/g, "-")}.svg`;
        document.body.appendChild(a);
        a.click();
        document.body.removeChild(a);
        URL.revokeObjectURL(url);
      }
    });

    // COPY SVG FUNCTIONALITY - Works regardless of allowColorChange
    const copySvgButtons = document.querySelectorAll(".copy-svg-btn");

    copySvgButtons.forEach((button) => {
      button.addEventListener("click", async (event) => {
        // Prevent default link behavior
        event.preventDefault();

        const logoCard = button.closest(".logo-card");
        const svgUrl = button.getAttribute("data-svg-url");

        if (!svgUrl) return;

        try {
          let svgText;

          // Check if we have a modified SVG and if color changes are allowed
          if (allowColorChange) {
            const currentSvg = logoCard?.getAttribute("data-current-svg");

            if (currentSvg) {
              // Use the cached modified SVG
              svgText = currentSvg;
            } else {
              // Get the active color and modify the SVG
              const activeColorOption = logoCard?.querySelector(
                ".color-option.active",
              );
              if (activeColorOption) {
                const color = activeColorOption.getAttribute("data-color");
                svgText = await modifySvg(svgUrl, color);

                // Store for future use
                if (svgText && logoCard) {
                  logoCard.setAttribute("data-current-svg", svgText);
                }
              }
            }
          }

          // If no modified content or color change not allowed, fetch the original
          if (!svgText) {
            const response = await fetch(svgUrl);
            svgText = await response.text();
          }

          // Copy to clipboard
          await navigator.clipboard.writeText(svgText);

          // Show success feedback
          const originalHTML = button.innerHTML;
          button.innerHTML =
            '<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="#10b981" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><polyline points="20 6 9 17 4 12"></polyline></svg> Copiado!';
          button.setAttribute("style", "color: #10b981 !important");

          setTimeout(() => {
            button.innerHTML = originalHTML;
            button.setAttribute("style", "");
          }, 2000);
        } catch (err) {
          console.error("Failed to copy SVG:", err);
          alert("NÃ£o foi possÃ­vel copiar o SVG. Tente novamente.");
        }
      });
    });

    // PNG DOWNLOAD FUNCTIONALITY - Works regardless of allowColorChange
    document.addEventListener("click", async function (event) {
      const target = event.target.closest(".png-download-btn");
      if (!target) return;

      // Prevent default behavior
      event.preventDefault();

      const logoCard = target.closest(".logo-card");
      const logoName =
        target.getAttribute("data-logo-name") ||
        logoCard.querySelector("h4").textContent.trim();
      const logoImage = logoCard.querySelector(".logo-image");

      try {
        // Get the current SVG content (either modified or original)
        let svgContent;
        const currentSvg = logoCard.getAttribute("data-current-svg");

        if (currentSvg) {
          // Use already modified SVG
          svgContent = currentSvg;
        } else {
          // Get the original SVG
          const svgUrl = logoImage.getAttribute("src");
          if (!svgUrl) throw new Error("SVG source not found");

          // If color changes are enabled, apply the active color
          if (allowColorChange) {
            const activeColorOption = logoCard.querySelector(
              ".color-option.active",
            );
            const color = activeColorOption
              ? activeColorOption.getAttribute("data-color")
              : "primary";

            svgContent = await modifySvg(svgUrl, color);
          }

          // If no modified content or color change not allowed, fetch the original
          if (!svgContent) {
            const response = await fetch(svgUrl);
            svgContent = await response.text();
          }
        }

        // Convert SVG to PNG with a reasonable max size that preserves aspect ratio
        const pngUrl = await convertSvgToPng(svgContent, 1200, 1200);

        // Download the PNG
        const a = document.createElement("a");
        a.href = pngUrl;
        a.download = `${logoName.toLowerCase().replace(/\s+/g, "-")}.png`;
        document.body.appendChild(a);
        a.click();
        document.body.removeChild(a);

        // Show success feedback
        const originalHTML = target.innerHTML;
        target.innerHTML =
          '<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="#10b981" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><polyline points="20 6 9 17 4 12"></polyline></svg> Baixado!';
        target.style.color = "#10b981";

        setTimeout(() => {
          target.innerHTML = originalHTML;
          target.style.color = "";
        }, 2000);
      } catch (err) {
        console.error("Failed to convert SVG to PNG:", err);
        alert("NÃ£o foi possÃ­vel baixar o PNG. Tente novamente.");
      }
    });
  });
</script>
